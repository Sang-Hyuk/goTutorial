// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/fileDAO.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "tutorial/model"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockFileDAO is a mock of FileDAO interface.
type MockFileDAO struct {
	ctrl     *gomock.Controller
	recorder *MockFileDAOMockRecorder
}

// MockFileDAOMockRecorder is the mock recorder for MockFileDAO.
type MockFileDAOMockRecorder struct {
	mock *MockFileDAO
}

// NewMockFileDAO creates a new mock instance.
func NewMockFileDAO(ctrl *gomock.Controller) *MockFileDAO {
	mock := &MockFileDAO{ctrl: ctrl}
	mock.recorder = &MockFileDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDAO) EXPECT() *MockFileDAOMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileDAO) DeleteFile(file *model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileDAOMockRecorder) DeleteFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileDAO)(nil).DeleteFile), file)
}

// GetDatabase mocks base method.
func (m *MockFileDAO) GetDatabase() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockFileDAOMockRecorder) GetDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockFileDAO)(nil).GetDatabase))
}

// GetDeleteFile mocks base method.
func (m *MockFileDAO) GetDeleteFile(file *model.File) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleteFile", file)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDeleteFile indicates an expected call of GetDeleteFile.
func (mr *MockFileDAOMockRecorder) GetDeleteFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleteFile", reflect.TypeOf((*MockFileDAO)(nil).GetDeleteFile), file)
}

// GetFile mocks base method.
func (m *MockFileDAO) GetFile(file *model.File) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", file)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFileDAOMockRecorder) GetFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileDAO)(nil).GetFile), file)
}

// GetFileByID mocks base method.
func (m *MockFileDAO) GetFileByID(file *model.File) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByID", file)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetFileByID indicates an expected call of GetFileByID.
func (mr *MockFileDAOMockRecorder) GetFileByID(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByID", reflect.TypeOf((*MockFileDAO)(nil).GetFileByID), file)
}

// GetFileListByPath mocks base method.
func (m *MockFileDAO) GetFileListByPath(path string) (*model.FileList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileListByPath", path)
	ret0, _ := ret[0].(*model.FileList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileListByPath indicates an expected call of GetFileListByPath.
func (mr *MockFileDAOMockRecorder) GetFileListByPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileListByPath", reflect.TypeOf((*MockFileDAO)(nil).GetFileListByPath), path)
}

// RestoreFile mocks base method.
func (m *MockFileDAO) RestoreFile(file *model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreFile indicates an expected call of RestoreFile.
func (mr *MockFileDAOMockRecorder) RestoreFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFile", reflect.TypeOf((*MockFileDAO)(nil).RestoreFile), file)
}

// SaveFile mocks base method.
func (m *MockFileDAO) SaveFile(file *model.File, root string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", file, root)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileDAOMockRecorder) SaveFile(file, root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileDAO)(nil).SaveFile), file, root)
}

// SetDatabase mocks base method.
func (m *MockFileDAO) SetDatabase(db *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatabase", db)
}

// SetDatabase indicates an expected call of SetDatabase.
func (mr *MockFileDAOMockRecorder) SetDatabase(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabase", reflect.TypeOf((*MockFileDAO)(nil).SetDatabase), db)
}
